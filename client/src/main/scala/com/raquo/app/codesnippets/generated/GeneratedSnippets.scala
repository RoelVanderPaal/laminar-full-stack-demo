package com.raquo.app.codesnippets.generated

import com.raquo.app.codesnippets.CodeSnippet
import vendor.highlightjs.hljs.LanguageName

/** This file is generated at compile-time by CodeSnippetsGenerator.scala */
object GeneratedSnippets {
  
  val `controlled` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/ControlledInputsView.scala", "ControlledInputsView.scala", "scala".asInstanceOf[LanguageName], 26, 56, "controlled", List("val zipVar = Var(\"\")", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      controlled(", "        value <-- zipVar,", "        onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipVar", "      )", "    ),", "    button(", "      typ(\"button\"), // HTML buttons are of type \"submit\" by default", "      \"Set SF zip code\",", "      onClick.mapTo(\"94110\") --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  // Using the form element's onSubmit in this example,", "  // but you could also respond on button click if you", "  // don't want a form element", "  button(typ(\"submit\"), \"Submit\")", ")")),
  )
  
  val `counter` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 12, 12, "counter", List("Counter(label = \"Foo\", initialStep = 1),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 19, 44, "counter", List("def Counter(label: String, initialStep: Int): HtmlElement = {", "  val allowedSteps = List(1, 2, 3, 5, 10)", "  val stepVar = Var(initialStep)", "  val diffBus = new EventBus[Int]", "  val countSignal: Signal[Int] = diffBus.events.scanLeft(initial = 0)(_ + _)", "", "  div(", "    cls(\"Counter\"),", "    p(", "      \"Step: \",", "      select(", "        value <-- stepVar.signal.map(_.toString),", "        onChange.mapToValue.map(_.toInt) --> stepVar,", "        allowedSteps.map { step => option(value := step.toString, step) }", "      )", "    ),", "    p(", "      label + \": \",", "      b(child.text <-- countSignal),", "      \" \",", "      // Two different ways to get stepVar's value:", "      button(\"â€“\", onClick.mapTo(-1 * stepVar.now()) --> diffBus),", "      button(\"+\", onClick.compose(_.sample(stepVar.signal)) --> diffBus)", "    )", "  )", "}")),
  )
  
  val `form-state` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.scala", "FormStateView.scala", "scala".asInstanceOf[LanguageName], 9, 87, "form-state", List("object FormStateView {", "", "  // Find and import the LESS (CSS) file for this component. See globResolverPlugin and importSideEffectPlugin", "  JSImportSideEffect(\"@find/**/FormStateView.less\")", "", "  private val stateVar = Var(FormState())", "", "  private val zipWriter = stateVar.updater[String]((state, zip) => state.copy(zip = zip))", "", "  private val descriptionWriter = stateVar.updater[String]((state, desc) => state.copy(city = desc))", "", "  private val submitter = Observer[FormState] { state =>", "    if (state.hasErrors) {", "      stateVar.update(_.copy(showErrors = true))", "    } else {", "      dom.window.alert(s\"Zip: ${state.zip}; Description: ${state.city}\")", "    }", "  }", "", "  def apply(): HtmlElement = {", "    div(", "      cls(\"FormStateView\"),", "      form(", "        onSubmit", "          .preventDefault", "          .mapTo(stateVar.now()) --> submitter,", "", "        renderInputRow(_.cityError)(", "          label(\"City: \"),", "          input(", "            controlled(", "              value <-- stateVar.signal.map(_.city),", "              onInput.mapToValue --> descriptionWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // \"submit\" is the default in HTML", "            \"Clear\",", "            onClick.mapTo(\"\") --> descriptionWriter", "          )", "        ),", "", "        renderInputRow(_.zipError)(", "          label(\"Zip code: \"),", "          input(", "            cls(\"-zipCodeInput\"),", "            placeholder(\"12345\"),", "            controlled(", "              value <-- stateVar.signal.map(_.zip),", "              onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // default button type in HTML is \"submit\", we don't want it", "            \"Set SF\",", "            onClick.mapTo(\"94110\") --> zipWriter", "          )", "        ),", "        ", "        button(typ(\"submit\"), \"Submit\")", "      ),", "      CodeSnippets(_.`form-state`) // Renders the code snippet that you can see online.", "    )", "  }", "", "  private def renderInputRow(", "    error: FormState => Option[String]", "  )(", "    mods: Modifier[HtmlElement]*", "  ): HtmlElement = {", "    val errorSignal = stateVar.signal.map(_.displayError(error))", "    div(", "      cls(\"-inputRow\"),", "      cls.toggle(\"x-hasError\") <-- errorSignal.map(_.nonEmpty),", "      mods,", "      child.maybe <-- errorSignal.map(_.map(err => div(cls(\"-error\"), err)))", "    )", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.less", "FormStateView.less", "less".asInstanceOf[LanguageName], 2, 47, "form-state", List(".FormStateView {", "", "  > h1 {", "    margin-bottom: 35px;", "  }", "", "  > form {", "", "    > .-inputRow {", "      margin: 10px -10px;", "      padding: 10px;", "", "      &.x-hasError {", "        background: #ffeeee;", "      }", "", "      > .-error {", "        margin-top: 5px;", "        color: red;", "        font-size: 90%;", "      }", "", "      > input, > button {", "        margin: 0 5px;", "      }", "", "      > input {", "        padding: 4px 2px;", "        max-width: 80px;", "", "        &.-zipCodeInput {", "          max-width: 60px;", "        }", "      }", "", "      > button {", "        padding: 4px 8px;", "      }", "    }", "", "    > button[type=\"submit\"] {", "      margin-top: 20px;", "      padding: 4px 8px;", "    }", "  }", "}")),
  )
  
  val `hello world` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/HelloWorldView.scala", "HelloWorldView.scala", "scala".asInstanceOf[LanguageName], 23, 35, "hello world", List("val nameVar = Var(initial = \"world\")", "div(", "  label(\"Your name: \"),", "  input(", "    onMountFocus,", "    placeholder := \"Enter your name here\",", "    onInput.mapToValue --> nameVar", "  ),", "  p(", "    \"Hello, \",", "    child.text <-- nameVar.signal.map(_.toUpperCase)", "  )", ")")),
  )
  
  val `network/ajax-tester` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 30, 30, "network/ajax-tester", List("AjaxTester.app,")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 111, 187, "network/ajax-tester", List("object AjaxTester {", "", "  // Example based on plain JS version: http://plnkr.co/edit/ycQbBr0vr7ceUP2p6PHy?preview", "", "  case class AjaxOption(name: String, baseUrl: String, bustCache: Boolean = false) {", "    def url: String = if (bustCache) baseUrl + \"?t=\" + js.Date.now() else baseUrl", "  }", "", "  private val options = List(", "    AjaxOption(\"Valid Ajax request\", \"https://api.zippopotam.us/us/90210\"),", "    AjaxOption(\"Download 10MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/10mb.test\", bustCache = true),", "    AjaxOption(\"Download 100MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/100mb.test\", bustCache = true),", "    AjaxOption(\"URL that will fail due to invalid domain\", \"https://api.zippopotam.uxx/us/90210\"),", "    AjaxOption(\"URL that will fail due to CORS restriction\", \"https://unsplash.com/photos/KDYcgCEoFcY/download?force=true\")", "  )", "  private val selectedOptionVar = Var(options.head)", "  private val pendingRequestVar = Var[Option[dom.XMLHttpRequest]](None)", "  private val eventsVar = Var(List.empty[String])", "", "  val app: HtmlElement = div(", "    h2(\"Ajax API tester\", titleLink(\"ajax-tester\")),", "    options.map { option =>", "      div(", "        input(", "          typ(\"radio\"),", "          idAttr(option.name),", "          nameAttr(\"ajaxOption\"),", "          checked <-- selectedOptionVar.signal.map(_ == option),", "          onChange.mapTo(option) --> selectedOptionVar", "        ),", "        label(forId(option.name), \" \" + option.name)", "      )", "    },", "    br(),", "    div(", "      button(", "        \"Send\",", "        inContext { thisNode =>", "          val clickStream = thisNode.events(onClick).sample(selectedOptionVar.signal)", "          val responseStream = clickStream.flatMap { opt =>", "            AjaxStream", "              .get(", "                url = opt.url,", "                // These observers are optional, we're just using them for demo", "                requestObserver = pendingRequestVar.someWriter,", "                progressObserver = eventsVar.updater { (evs, p) =>", "                  val ev = p._2", "                  evs :+ s\"Progress: ${ev.loaded} / ${ev.total} (lengthComputable = ${ev.lengthComputable})\"", "                },", "                readyStateChangeObserver = eventsVar.updater { (evs, req) =>", "                  evs :+ s\"Ready state: ${req.readyState}\"", "                }", "              )", "              .map(\"Response: \" + _.responseText)", "              .recover { case err: AjaxStreamError => Some(err.getMessage) }", "          }", "", "          List(", "            clickStream.map(opt => List(s\"Starting: GET ${opt.url}\")) --> eventsVar,", "            responseStream --> eventsVar.updater[String](_ :+ _)", "          )", "        }", "      ),", "      \" \",", "      button(", "        \"Abort\",", "        onClick --> (_ => pendingRequestVar.now().foreach(_.abort()))", "      )", "    ),", "    div(", "      fontSize.em(0.8),", "      br(),", "      b(\"Events:\"),", "      div(children <-- eventsVar.signal.map(_.map(div(_))))", "    )", "  )", "}")),
  )
  
  val `network/fetch-tester` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 26, 26, "network/fetch-tester", List("FetchTester(),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 37, 107, "network/fetch-tester", List("object FetchTester {", "", "  // Example based on plain JS version: http://plnkr.co/edit/ycQbBr0vr7ceUP2p6PHy?preview", "", "  case class FetchOption(name: String, baseUrl: String, bustCache: Boolean = false) {", "    def url: String = if (bustCache) baseUrl + \"?t=\" + js.Date.now() else baseUrl", "  }", "", "  private val options = List(", "    FetchOption(\"Valid Fetch request\", \"http://api.zippopotam.us/us/90210\"),", "    FetchOption(\"Download 10MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/10mb.test\", bustCache = true),", "    FetchOption(\"Download 100MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/100mb.test\", bustCache = true),", "    FetchOption(\"URL that will fail due to invalid domain\", \"http://api.zippopotam.uxx/us/90210\"),", "    FetchOption(\"URL that will fail due to CORS restriction\", \"http://unsplash.com/photos/KDYcgCEoFcY/download?force=true\")", "  )", "", "  def apply(): HtmlElement = {", "    val selectedOptionVar = Var(options.head)", "    val eventsVar = Var(List.empty[String])", "    val (abortStream, abort) = EventStream.withUnitCallback", "", "    div(", "      h2(\"Fetch API tester\", titleLink(\"fetch-tester\")),", "      options.map { option =>", "        div(", "          input(", "            idAttr(option.name),", "            typ(\"radio\"),", "            nameAttr(\"fetchOption\"),", "            checked <-- selectedOptionVar.signal.map(_ == option),", "            onChange.mapTo(option) --> selectedOptionVar,", "          ),", "          label(forId(option.name), \" \" + option.name)", "        )", "      },", "      br(),", "      div(", "        button(", "          \"Send\",", "          inContext { thisNode =>", "            val clicks = thisNode.events(onClick).sample(selectedOptionVar.signal)", "            val responses = clicks.flatMap { opt =>", "              FetchStream.get(url = opt.url, _.abortStream(abortStream))", "                .map(resp => if (resp.length >= 1000) resp.substring(0, 1000) else resp)", "                .map(\"Response (first 1000 chars): \" + _)", "                .recover { case err: Throwable => Some(err.getMessage) }", "            }", "", "            List(", "              clicks.map(opt => List(s\"Starting: GET ${opt.url}\")) --> eventsVar,", "              responses --> eventsVar.updater[String](_ :+ _)", "            )", "          }", "        ),", "        \" \",", "        button(", "          \"Abort\",", "          // Note: using advanced Laminar syntax feature â€“ see https://laminar.dev/documentation#-unit-sinks", "          onClick --> abort()", "          // onClick.mapTo(()) --> abort // Alternative syntax", "        )", "      ),", "      div(", "        fontSize.em(0.8),", "        br(),", "        b(\"Events:\"),", "        div(children <-- eventsVar.signal.map(_.map(div(_))))", "      )", "    )", "  }", "}")),
  )
  
  val `shoelace/buttons-and-icons` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 42, 70, "shoelace/buttons-and-icons", List("Button.of(", "  _.variant.primary,", "  _.size.large,", "  _ => \"Settings\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(", "      _.name(\"gear-fill\"),", "      _.fontSize.em(1.3), // this is how you set icon size in shoelace", "    )", "  )", "),", "\" \",", "Button.of(", "  _ => \"Reload\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(_.name(\"arrow-counterclockwise\"))", "  )", "),", "\" \",", "Button.of(", "  _.variant.success,", "  _ => \"User\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.suffix(", "    Icon.of(_.name(\"person-fill\"))", "  )", ")")),
  )
  
  val `shoelace/css-custom-properties` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 140, 146, "shoelace/css-custom-properties", List("Switch.of(),", "\" \",", "Switch.of(", "  _.width.px(100),", "  _.height.px(10),", "  _.thumbSize.px(14)", "),")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/components/Switch.scala", "Switch.scala", "scala".asInstanceOf[LanguageName], 38, 42, "shoelace/css-custom-properties", List("lazy val width: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--width\")", "", "lazy val height: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--height\")", "", "lazy val thumbSize: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--thumb-size\")")),
  )
  
  val `shoelace/css-parts` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 9, 75, "shoelace/css-parts", List("// Customization using CSS parts as described in https://shoelace.style/getting-started/customizing#css-parts", "// Except I used LESS nesting syntax, and also colored the icon.", ".tomato-button {", "", "  &::part(base) {", "    background: var(--sl-color-neutral-0);", "    border: solid 1px tomato;", "", "    &:hover {", "      background: rgba(255, 99, 71, 0.1);", "    }", "", "    &:active {", "      background: rgba(255, 99, 71, 0.2);", "    }", "", "    &:focus-visible {", "      box-shadow: 0 0 0 3px rgba(255, 99, 71, 0.33);", "    }", "  }", "", "  &::part(label) {", "    color: tomato;", "  }", "", "  // Icon color to match", "  &::part(prefix),", "  &::part(suffix) {", "    color: tomato;", "    font-size: 1.3em;", "  }", "}", "", "// Styles the pink button, from https://shoelace.style/components/button#styling-buttons", "sl-button.pink::part(base) {", "  /* Set design tokens for height and border width */", "  --sl-input-height-medium: 48px;", "  --sl-input-border-width: 4px;", "", "  border-radius: 0;", "  background-color: #ff1493;", "  border-top-color: #ff7ac1;", "  border-left-color: #ff7ac1;", "  border-bottom-color: #ad005c;", "  border-right-color: #ad005c;", "  color: white;", "  font-size: 1.125rem;", "  box-shadow: 0 2px 10px #0002;", "  transition: var(--sl-transition-medium) transform ease, var(--sl-transition-medium) border ease;", "", "  &:hover {", "    transform: scale(1.05) rotate(-1deg);", "  }", "", "  &:active {", "    border-top-color: #ad005c;", "    border-right-color: #ff7ac1;", "    border-bottom-color: #ff7ac1;", "    border-left-color: #ad005c;", "    transform: scale(1.05) rotate(-1deg) translateY(2px);", "  }", "", "  &:focus-visible {", "    outline: dashed 2px deeppink;", "    outline-offset: 4px;", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 118, 131, "shoelace/css-parts", List("Button.of(", "  _ => cls(\"tomato-button\"),", "  _ => \"Tasteful tomato button\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(_.name(\"check-circle-fill\"))", "  )", "),", "\" \",", "Button.of(", "  _ => cls(\"pink\"),", "  _ => \"Crazy pink button\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") }", "),")),
  )
  
  val `shoelace/design-tokens` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 79, 95, "shoelace/design-tokens", List(".indigoPrimaryColor {", "  // Any elements that match `.ShoelaceWebComponentsView .indigoPrimaryColor`,", "  // and any of their descendants, will have indigo colors as primary colors.", "  // Read about CSS custom properties:", "  // https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties", "  --sl-color-primary-50: var(--sl-color-indigo-50);", "  --sl-color-primary-100: var(--sl-color-indigo-100);", "  --sl-color-primary-200: var(--sl-color-indigo-200);", "  --sl-color-primary-300: var(--sl-color-indigo-300);", "  --sl-color-primary-400: var(--sl-color-indigo-400);", "  --sl-color-primary-500: var(--sl-color-indigo-500);", "  --sl-color-primary-600: var(--sl-color-indigo-600);", "  --sl-color-primary-700: var(--sl-color-indigo-700);", "  --sl-color-primary-800: var(--sl-color-indigo-800);", "  --sl-color-primary-900: var(--sl-color-indigo-900);", "  --sl-color-primary-950: var(--sl-color-indigo-950);", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 103, 110, "shoelace/design-tokens", List("p(", "  cls(\"indigoPrimaryColor\"), // you could also apply this class directly to the button.", "  Button.of(", "    _.variant.primary,", "    _ => \"Primary indigo\",", "    _ => onClick --> { _ => dom.window.alert(\"Clicked\") }", "  )", "),")),
  )
  
  val `shoelace/themes` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 2, 5, "shoelace/themes", List(".ShoelaceWebComponentsView {", "  // Basic light & dark theme support for these two properties of this non-Shoelace element.", "  color: var(--sl-color-neutral-1000);", "  background: var(--sl-color-neutral-0);")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 18, 19, "shoelace/themes", List("JSImportSideEffect(\"@shoelace-style/shoelace/dist/themes/light.css\")", "JSImportSideEffect(\"@shoelace-style/shoelace/dist/themes/dark.css\")")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 30, 30, "shoelace/themes", List("val isDarkVar = Var(false)")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 82, 82, "shoelace/themes", List("cls <-- isDarkVar.signal.map(if (_) \"sl-theme-dark\" else \"sl-theme-light\"),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 85, 95, "shoelace/themes", List("Button.of(", "  _.variant.primary,", "  _ => child.text <-- isDarkVar.signal.map(if (_) \"Use light theme\" else \"Use dark theme\"),", "  _ => onClick.mapTo(!isDarkVar.now()) --> isDarkVar,", "  _.slots.prefix(", "    Icon.of(", "      _.name <-- isDarkVar.signal.map(if (_) \"brightness-high-fill\" else \"moon-stars-fill\"),", "      _.fontSize.em(1.3), // this is how you set icon size in shoelace", "    )", "  )", "),")),
  )
  
  val `time/basic` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 36, 48, "time/basic", List("val tickStream = EventStream.periodic(1000)", "", "div(", "  appStyles,", "  div(", "    \"Tick #: \",", "    child.text <-- tickStream.map(_.toString)", "  ),", "  div(", "    \"Random #: \",", "    child.text <-- tickStream.mapTo(scala.util.Random.nextInt() % 100)", "  )", ")")),
  )
  
  val `time/debounce` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 73, 103, "time/debounce", List("val emailRegex = new RegExp(\"^[^@]+@[^@]+\\\\.[^@]+$\")", "", "def emailError(email: String): Option[String] =", "  if (email.isEmpty)", "    Some(\"Please fill out email\")", "  else if (!emailRegex.test(email))", "    Some(\"Invalid email!\")", "  else", "    None", "", "val inputBus = new EventBus[String]", "", "val debouncedErrorStream: EventStream[Option[String]] =", "  inputBus.events", "    .debounce(1000)", "    .map(emailError)", "", "div(", "  appStyles,", "  span(", "    label(\"Your email: \"),", "    input(", "      value <-- inputBus.events,", "      onInput.mapToValue --> inputBus", "    )", "  ),", "  child <-- debouncedErrorStream.map {", "    case Some(err) => span(cls(\"u-error\"), \"Error: \" + err)", "    case None => span(cls(\"u-success\"), \"Email ok!\")", "  }", ")")),
  )
  
  val `time/delay` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 54, 67, "time/delay", List("val clickBus = new EventBus[Unit]", "", "val maybeAlertStream = EventStream.merge(", "  clickBus.events.mapTo(Some(span(\"Just clicked!\"))),", "  clickBus.events.flatMap { _ =>", "    EventStream.fromValue(None, emitOnce = true).delay(500)", "  }", ")", "", "div(", "  appStyles,", "  button(onClick.mapTo(()) --> clickBus, \"Click me\"),", "  child.maybe <-- maybeAlertStream", ")")),
  )
  
  val `todomvc` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/todomvc/TodoMvcApp.scala", "TodoMvcApp.scala", "scala".asInstanceOf[LanguageName], 9, 213, "todomvc", List("object TodoMvcApp {", "", "  JSImportSideEffect(\"@find/**/TodoMvcApp.css\")", "", "  // This implementation is very loosely based on Outwatch TodoMVC, for comparison see", "  // https://github.com/clovellytech/outwatch-examples/tree/master/todomvc/src/main/scala/todomvc", "", "", "  // --- 1. Models ---", "", "  case class TodoItem(id: Int, text: String, completed: Boolean)", "", "  sealed abstract class Filter(val name: String, val passes: TodoItem => Boolean)", "", "  object ShowAll extends Filter(\"All\", _ => true)", "  object ShowActive extends Filter(\"Active\", !_.completed)", "  object ShowCompleted extends Filter(\"Completed\", _.completed)", "", "  val filters: List[Filter] = ShowAll :: ShowActive :: ShowCompleted :: Nil", "", "  sealed trait Command", "", "  case class Create(itemText: String) extends Command", "  case class UpdateText(itemId: Int, text: String) extends Command", "  case class UpdateCompleted(itemId: Int, completed: Boolean) extends Command", "  case class Delete(itemId: Int) extends Command", "  case object DeleteCompleted extends Command", "", "", "  // --- 2. State ---", "", "  // Var-s are reactive state variables suitable for both local state and redux-like global stores.", "  // Laminar uses my library Airstream as its reactive layer https://github.com/raquo/Airstream", "", "  private val itemsVar = Var(List[TodoItem]())", "  private val filterVar = Var[Filter](ShowAll)", "  private var lastId = 1 // just for auto-incrementing IDs", "", "  private val commandObserver = Observer[Command] {", "    case Create(itemText) =>", "      lastId += 1", "      if (filterVar.now() == ShowCompleted)", "        filterVar.set(ShowAll)", "      itemsVar.update(_ :+ TodoItem(id = lastId, text = itemText, completed = false))", "    case UpdateText(itemId, text) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(text = text) else item))", "    case UpdateCompleted(itemId, completed) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(completed = completed) else item))", "    case Delete(itemId) =>", "      itemsVar.update(_.filterNot(_.id == itemId))", "    case DeleteCompleted =>", "      itemsVar.update(_.filterNot(_.completed))", "  }", "", "", "  // --- 3. Views ---", "", "  lazy val node: HtmlElement = {", "    val todoItemsSignal = itemsVar", "      .signal", "      .combineWith(filterVar.signal)", "      .mapN(_ filter _.passes)", "    div(", "      div(", "        cls(\"todoapp-container u-bleed\"),", "        div(", "          cls(\"todoapp\"),", "          div(", "            cls(\"header\"),", "            h1(\"todos\"),", "            renderNewTodoInput,", "          ),", "          div(", "            hideIfNoItems,", "            cls(\"main\"),", "            ul(", "              cls(\"todo-list\"),", "              children <-- todoItemsSignal.split(_.id)(renderTodoItem)", "            )", "          ),", "          renderStatusBar", "        )", "      ),", "      CodeSnippets(_.`todomvc`)", "    )", "  }", "", "  private def renderNewTodoInput =", "    input(", "      cls(\"new-todo\"),", "      placeholder(\"What needs to be done?\"),", "      autoFocus(true),", "      onEnterPress", "        .mapToValue", "        .filter(_.nonEmpty)", "        .map(Create(_))", "        .setValue(\"\") --> commandObserver,", "      // When all we need is to clear an uncontrolled input, we can use setValue(\"\")", "      //  but we still need an observer to create the subscription, so we just use an empty one.", "      onEscapeKeyUp.setValue(\"\") --> Observer.empty", "    )", "", "  // Render a single item. Note that the result is a single element: not a stream, not some virtual DOM representation.", "  private def renderTodoItem(itemId: Int, initialTodo: TodoItem, itemSignal: Signal[TodoItem]): HtmlElement = {", "    val isEditingVar = Var(false) // Example of local state", "    val updateTextObserver = commandObserver.contramap[UpdateText] { updateCommand =>", "      isEditingVar.set(false)", "      updateCommand", "    }", "    li(", "      cls <-- itemSignal.map(item => Map(\"completed\" -> item.completed)),", "      onDblClick.filter(_ => !isEditingVar.now()).mapTo(true) --> isEditingVar.writer,", "      children <-- isEditingVar.signal.map[List[HtmlElement]] {", "        case true =>", "          val cancelObserver = isEditingVar.writer.contramap[Unit](Unit => false)", "          renderTextUpdateInput(itemId, itemSignal, updateTextObserver, cancelObserver) :: Nil", "        case false =>", "          List(", "            renderCheckboxInput(itemId, itemSignal),", "            label(child.text <-- itemSignal.map(_.text)),", "            button(", "              cls(\"destroy\"),", "              onClick.mapTo(Delete(itemId)) --> commandObserver", "            )", "          )", "      }", "    )", "  }", "", "  // Note that we pass reactive variables: `itemSignal` for reading, `updateTextObserver` for writing", "  private def renderTextUpdateInput(", "    itemId: Int,", "    itemSignal: Signal[TodoItem],", "    updateTextObserver: Observer[UpdateText],", "    cancelObserver: Observer[Unit]", "  ) =", "    input(", "      cls(\"edit\"),", "      defaultValue <-- itemSignal.map(_.text),", "      onMountFocus,", "      onEscapeKeyUp.mapToUnit --> cancelObserver,", "      onEnterPress.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver,", "      onBlur.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver", "    )", "", "  private def renderCheckboxInput(itemId: Int, itemSignal: Signal[TodoItem]) =", "    input(", "      cls(\"toggle\"),", "      typ(\"checkbox\"),", "      checked <-- itemSignal.map(_.completed),", "      onInput.mapToChecked.map { isChecked =>", "        UpdateCompleted(itemId, completed = isChecked)", "      } --> commandObserver", "    )", "", "  private def renderStatusBar =", "    footerTag(", "      hideIfNoItems,", "      cls(\"footer\"),", "      span(", "        cls(\"todo-count\"),", "        child.text <-- itemsVar.signal", "          .map(_.count(!_.completed))", "          .map(pluralize(_, \"item left\", \"items left\")),", "      ),", "      ul(", "        cls(\"filters\"),", "        filters.map(filter => li(renderFilterButton(filter)))", "      ),", "      child.maybe <-- itemsVar.signal.map { items =>", "        if (items.exists(ShowCompleted.passes)) Some(", "          button(", "            cls(\"clear-completed\"),", "            \"Clear completed\",", "            onClick.map(_ => DeleteCompleted) --> commandObserver", "          )", "        ) else None", "      }", "    )", "", "  private def renderFilterButton(filter: Filter) =", "    a(", "      cls.toggle(\"selected\") <-- filterVar.signal.map(_ == filter),", "      onClick.preventDefault.mapTo(filter) --> filterVar.writer,", "      filter.name", "    )", "", "  // Every little thing in Laminar can be abstracted away", "  private def hideIfNoItems: Mod[HtmlElement] =", "    display <-- itemsVar.signal.map { items =>", "      if (items.nonEmpty) \"\" else \"none\"", "    }", "", "", "  // --- Generic helpers ---", "", "  private def pluralize(num: Int, singular: String, plural: String): String =", "    s\"$num ${if (num == 1) singular else plural}\"", "", "  private val onEnterPress = onKeyPress.filter(_.keyCode == dom.KeyCode.Enter)", "", "  // Non-printable characters don't get a `keypress` event in JS,", "  // so we need to listen to `keydown` or `keyup` instead.", "  private val onEscapeKeyUp = onKeyUp.filter(_.keyCode == dom.KeyCode.Escape)", "}")),
  )
  
  val `ui5-title` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 26, 29, "ui5-title", List("Title(", "  _.level := TitleLevel.H1,", "  \"SAP UI5 Web Components\"", "),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 12, 12, "ui5-title", List("--sapGroup_TitleTextColor: #663300;")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 29, 33, "ui5-title", List("ui5-title[level=\"H1\"] {", "  font-family: Georgia, serif;", "  // Can also be achieved this way:", "  //--sapFontHeaderFamily: Georgia, serif;", "}")),
  )
  
  val `ui5/renderButtons` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 71, 91, "ui5/renderButtons", List("List(", "  Button.of(", "    _ => \"CLICK ME\",", "    _ => onClick --> { _ => dom.window.alert(\"YOUR COMPLIANCE IS APPRECIATED\") }", "  ),", "  \" \",", "  Button.of(", "    _ => cls(\"x-yellow\"),", "    _ => \"Button styled via CSS\", // See SapUI5WebComponentsView.less", "    _ => onClick --> { _ => dom.window.alert(\"Ok\") }", "  ),", "  \" \",", "  Button.of(", "    _ => backgroundColor := \"green\",", "    _ => borderColor := \"green\",", "    _ => color.white,", "    _ => fontWeight.bold,", "    _ => \"Button styled via Laminar\",", "    _ => onClick --> { _ => dom.window.alert(\"Ok\") }", "  )", ")")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 42, 52, "ui5/renderButtons", List("ui5-button.x-yellow {", "  font-weight: bold;", "  color: black;", "  border: 2px solid red;", "  background: yellow;", "", "  &:hover {", "    background: red;", "    color: white;", "  }", "}")),
  )
  
  val `ui5/renderDatePicker` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 99, 110, "ui5/renderDatePicker", List("val selectedDateVar: Var[String] = Var(\"2023-01-31\")", "div(", "  Label(", "    \"Currently selected: \",", "    child.text <-- selectedDateVar.signal", "  ),", "  br(),", "  DatePicker.of(", "    _ => value <-- selectedDateVar,", "    _.events.onChange.mapToValue --> selectedDateVar", "  )", ")")),
  )
  
  val `ui5/renderMultiComboBox` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 116, 141, "ui5/renderMultiComboBox", List("val countries = List(\"Argentina\", \"Australia\", \"Belgium\", \"Bulgaria\", \"Canada\", \"Columbia\", \"Croatia\", \"Denmark\", \"Canada\", \"New Zealand\", \"UK\", \"USA\")", "val selectedCountriesVar = Var(List(countries.head))", "div(", "  div(", "    Label(", "      \"Currently selected: \",", "      child.text <-- selectedCountriesVar.signal.map(_.mkString(\", \"))", "    )", "  ),", "  MultiComboBox.of(", "    _.placeholder := \"Choose your countries\",", "    _ => width.px := 300,", "    _.events.onSelectionChange.map(_.detail.items.map(_.text).toList) --> selectedCountriesVar,", "    _ => countries.map { country =>", "      MultiComboBox.item(", "        _.text := country,", "        _.selected <-- selectedCountriesVar.signal.map(_.contains(country))", "      )", "    }", "  ),", "  \" \",", "  Button(", "    onClick.mapTo(Nil) --> selectedCountriesVar,", "    \"Clear\"", "  )", ")")),
  )
  
  val `uncontrolled/form-no-vars` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 103, 124, "uncontrolled/form-no-vars", List("val inputEl = input(", "  placeholder(\"12345\"),", "  maxLength(5), // HTML can help block some undesired input", "  onInput", "    .mapToValue", "    .map(_.filter(Character.isDigit))", "    .setAsValue --> Observer.empty", ")", "", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(inputEl.ref.value) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    inputEl", "  ),", "  p(", "    button(typ(\"submit\"), \"Submit\")", "  )", ")")),
  )
  
  val `uncontrolled/listening` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 44, 69, "uncontrolled/listening", List("val inputTextVar = Var(\"\")", "val checkedVar = Var(false)", "div(", "  appStyles,", "  p(", "    label(\"Name: \"),", "    input(", "      onInput.mapToValue --> inputTextVar", "    )", "  ),", "  p(", "    \"You typed: \",", "    child.text <-- inputTextVar", "  ),", "  p(", "    label(\"I like to check boxes: \"),", "    input(", "      typ(\"checkbox\"),", "      onInput.mapToChecked --> checkedVar", "    )", "  ),", "  p(", "    \"You checked the box: \",", "    child.text <-- checkedVar", "  )", ")")),
  )
  
  val `uncontrolled/transforming` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 75, 97, "uncontrolled/transforming", List("val zipVar = Var(\"\")", "div(", "  appStyles,", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      onInput", "        .mapToValue", "        .map(_.filter(Character.isDigit))", "        .setAsValue --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  button(", "    onClick.mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "    \"Submit\"", "  )", ")")),
  )
  
  val `wind-gradient` = List(
    CodeSnippet("./shared/shared/src/main/scala/com/raquo/weather/GradientReport.scala", "GradientReport.scala", "scala".asInstanceOf[LanguageName], 6, 55, "wind-gradient", List("import io.bullet.borer.*", "import io.bullet.borer.derivation.MapBasedCodecs.*", "", "/**", "  *", "  * @param cities                  List of cities to display, in order", "  * @param currentConditionsByCity cityId -> currentConditions.", "  *                                Note: some records might be missing if current conditions are not available", "  * @param forecastDays            list of day captions, in order to be displayed", "  * @param forecastsByDay          (day_caption -> cityId -> forecast)", "  */", "@JSExportAll", "case class GradientReport(", "  cities: List[CityStation],", "  currentConditionsByCity: Map[String, CityCurrentConditions],", "  forecastDays: List[String],", "  forecastsByDay: Map[String, Map[String, CityForecast]]", ") {", "", "  def selectCurrentConditions[A](", "    f: CityCurrentConditions => Option[A]", "  ): List[Option[A]] = {", "    cities.flatMap { city =>", "      for {", "        conditions <- currentConditionsByCity.get(city.id)", "      } yield {", "        f(conditions)", "      }", "    }", "  }", "", "  def selectForecasts[A](", "    day: String,", "    f: CityForecast => Option[A]", "  ): List[Option[A]] = {", "    cities.flatMap { city =>", "      for {", "        forecastsByCity <- forecastsByDay.get(day)", "        forecast <- forecastsByCity.get(city.id)", "      } yield {", "        f(forecast)", "      }", "    }", "  }", "}", "", "object GradientReport {", "", "  given codec: Codec[GradientReport] = deriveCodec", "}")),
    CodeSnippet("./shared/shared/src/main/scala/com/raquo/weather/Gradient.scala", "Gradient.scala", "scala".asInstanceOf[LanguageName], 8, 44, "wind-gradient", List("@JSExportAll", "enum Gradient(", "  val id: String,", "  val name: String,", "  val cities: List[CityStation]", ") {", "", "  val cityIds: List[String] = cities.map(_.id)", "", "  // Note: Lytton burned down and does not have current observations, so its usefulness is questionable", "  case Squamish extends Gradient(", "    id = \"squamish\",", "    name = \"Squamish\",", "    cities = List(Kamloops, Lytton, Merritt, Hope, Abbotsford, Vancouver, CityStation.Squamish, Whistler, Pemberton, Lillooet)", "  )", "", "  case Nitinat extends Gradient(", "    id = \"nitinat\",", "    name = \"Nitinat\",", "    cities = List(Ucluelet, PortAlberni)", "  )", "}", "", "object Gradient {", "", "  //given codec: Codec[Gradient] = Codec.of[String].bimap(_.id, forId(_))", "", "  val gradientIds: List[String] = Gradient.values.map(_.id).toList", "", "  def forId(gradientId: String): Option[Gradient] = {", "    Gradient.values.find(_.id == gradientId)", "  }", "", "  def forIdGet(gradientId: String): Gradient = {", "    forId(gradientId).getOrElse(throw new Exception(s\"Unknown gradient id: `${gradientId}`\"))", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientChart.scala", "WeatherGradientChart.scala", "scala".asInstanceOf[LanguageName], 12, 227, "wind-gradient", List("object WeatherGradientChart {", "", "  def makeChart(", "    canvasElement: dom.html.Canvas", "  ): Chart = {", "    // Note: most data and configuration is updated when the graph data is received", "", "    val chart = new Chart(", "      canvas = canvasElement,", "      config = new ChartConfig(", "        data = new ChartData(),", "        options = new ChartConfigOptions(", "          animation = false,", "          plugins = js.Dictionary(", "            \"legend\" -> js.Dynamic.literal(", "              \"display\" -> true,", "              \"position\" -> \"bottom\",", "              \"labels\" -> js.Dynamic.literal(", "                \"boxHeight\" -> 0,", "              )", "            ),", "            \"datalabels\" -> js.Dynamic.literal(", "              \"font\" -> js.Dynamic.literal(", "                \"weight\" -> \"bold\"", "              )", "            )", "          ),", "          // This makes the chart respond to match the size of its", "          // parent container (-graphbox in our case).", "          // See https://www.chartjs.org/docs/latest/configuration/responsive.html", "          maintainAspectRatio = false", "        )", "      )", "    )", "", "    chart", "  }", "", "  def updateChart(chart: Chart, selectedDay: Option[String], report: GradientReport): Unit = {", "    val cityNames = report.cities.toJSArray.map(_.name)", "", "    val (temperatures, pressures, datasets) = selectedDay match {", "      case None =>", "        // Current weather", "        val temperatures = report.selectCurrentConditions(_.temperatureC)", "        val pressures = report.selectCurrentConditions(_.pressureKPa)", "        (", "          temperatures.flatten,", "          pressures.flatten,", "          js.Array(", "            temperatureDatasetConfig(temperatures.map(_.orNull).toJSArray),", "            pressureDatasetConfig(pressures.map(_.orNull).toJSArray)", "          )", "        )", "      case Some(forecastDay) =>", "        val temperatures = report.selectForecasts(forecastDay, _.temperatureC.some)", "        val datasets = js.Array(", "          temperatureDatasetConfig(temperatures.map(_.orNull).toJSArray)", "        )", "        (temperatures.flatten, Nil, datasets)", "    }", "", "    val axes = scalesConfig(temperatures, pressures)", "", "    // To update chart.js graph, you need to mutate its config,", "    // then call chart.update() for it to take effect.", "    chart.config.data.labels = cityNames", "    chart.config.data.datasets = datasets", "    chart.config.options.scales = axes", "    chart.update()", "  }", "", "  private def temperatureDatasetConfig(temperatures: js.Array[Double | Null]): ChartDataset = {", "    new ChartDataset(", "      label = \"Temperature\",", "      typ = \"line\",", "      yAxisID = \"yMain\",", "      data = temperatures,", "      borderColor = \"#0000f0\",", "      pointBackgroundColor = \"#0000d0\",", "      pointBorderWidth = 0,", "      pointRadius = 4,", "      pointHoverRadius = 5,", "      pointHoverBorderWidth = 0", "    ).updateDynamic(", "      \"spanGaps\" -> true,", "      \"datalabels\" -> js.Dynamic.literal(", "        \"align\" -> \"top\",", "        \"color\" -> \"#000080\",", "        \"formatter\" -> (((value: Double, ctx: js.Dynamic) => {", "          Math.round(value).toString + \"Â°\"", "        }): js.Function2[Double, js.Dynamic, Any])", "      )", "    )", "  }", "", "  private def pressureDatasetConfig(pressures: js.Array[Double | Null]): ChartDataset = {", "    new ChartDataset(", "      label = \"Pressure\",", "      typ = \"line\",", "      yAxisID = \"yPressure\",", "      data = pressures,", "      borderColor = \"#f00000\",", "      pointBackgroundColor = \"#d00000\",", "      pointBorderWidth = 0,", "      pointRadius = 4,", "      pointHoverRadius = 5,", "      pointHoverBorderWidth = 0", "    ).updateDynamic(", "      \"spanGaps\" -> true,", "      \"datalabels\" -> js.Dynamic.literal(", "        \"align\" -> \"top\",", "        \"color\" -> \"#800000\"", "      )", "    )", "  }", "", "  private def scalesConfig(", "    temperatures: List[Double],", "    pressures: List[Double]", "  ): js.Dictionary[ChartAxis] = {", "    val xAxis = new ChartAxis()", "      .updateDynamic(", "        \"type\" -> \"category\",", "        \"grid\" -> js.Dictionary(", "          \"display\" -> false", "        ),", "        \"ticks\" -> js.Dynamic.literal(", "          \"minRotation\" -> 90,", "          \"maxRotation\" -> 90,", "        ),", "        \"offset\" -> true", "      )", "    val scales = js.Dictionary(", "      \"x\" -> xAxis,", "      \"yMain\" -> yMainScale(temperatures)", "    )", "", "    yPressureScale(pressures).foreach { scale =>", "      scales.update(\"yPressure\", scale)", "    }", "", "    scales", "  }", "", "  private def yMainScale(temperatures: List[Double]): ChartAxis = {", "    val stepSize = 5", "    val range = fixedScaleRange(", "      step = stepSize,", "      desiredNumSteps = 7,", "      dataValues = temperatures,", "      forceMin = if (temperatures.forall(_ > 0)) Some(0) else None", "    )", "    new ChartAxis(", "      position = \"left\",", "      min = range.map(_._1).orUndefined,", "      max = range.map(_._2).orUndefined", "    ).updateDynamic(", "      \"ticks\" -> js.Dictionary(", "        //\"count\" -> 7,", "        \"stepSize\" -> stepSize", "      ),", "      \"grid\" -> js.Dictionary(", "        \"display\" -> false", "      )", "    )", "  }", "", "  private def yPressureScale(pressures: List[Double]): Option[ChartAxis] = {", "    val pressureStepSize = 0.1", "    fixedScaleRange(", "      step = pressureStepSize,", "      desiredNumSteps = 8,", "      dataValues = pressures", "    ).map { (min, max) =>", "      new ChartAxis(", "        position = \"right\",", "        min = min,", "        max = max + pressureStepSize // allow extra space for data point labels", "      ).updateDynamic(", "        \"ticks\" -> js.Dictionary(", "          \"stepSize\" -> pressureStepSize,", "          \"callback\" -> (((value: Double) => f\"$value%.1f\"): js.Function1[Double, String])", "        ),", "        \"grid\" -> js.Dictionary(", "          \"display\" -> false", "        )", "      )", "    }", "  }", "", "  /** We want vertical axes to have consistent range (max - min value),", "    * so that it's easier for the user to judge the difference between", "    * the values for different cities on the chart. We also want to", "    * snap the min and max to certain steps.", "    * */", "  private def fixedScaleRange(", "    step: Double,", "    desiredNumSteps: Int,", "    dataValues: List[Double],", "    forceMin: Option[Double] = None", "  ): Option[(Double, Double)] = {", "    for {", "      minValue <- dataValues.minOption", "      maxValue <- dataValues.maxOption", "    } yield {", "      val desiredRange = desiredNumSteps * step", "      val scaleMin = forceMin.getOrElse {", "        val mean = (minValue + maxValue) / 2", "        Math.floor((mean - desiredRange / 2) / step) * step", "      }", "      val scaleMax = scaleMin + desiredRange", "      (scaleMin, scaleMax)", "    }", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientView.less", "WeatherGradientView.less", "less".asInstanceOf[LanguageName], 2, 16, "wind-gradient", List(".WeatherGradientView {", "", "  .Tabs {", "    margin: 20px 0;", "  }", "", "  .-graphbox {", "    position: relative;", "    height: 400px;", "", "    @media(max-width: 800px) {", "      min-height: min(100vh, 100vw);", "    }", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientView.scala", "WeatherGradientView.scala", "scala".asInstanceOf[LanguageName], 21, 186, "wind-gradient", List("object WeatherGradientView {", "", "  // Find and import the LESS (CSS) file for this component. See globResolverPlugin and importSideEffectPlugin", "  JSImportSideEffect(\"@find/**/WeatherGradientView.less\")", "", "  // Chart.js requires you to load the necessary components this way", "  // to avoid loading the entire library. It will also tell you which", "  // components are needed if you forget to include them.", "  Chart.register(", "    ChartDataLabelsPlugin,", "    Legend,", "    //BarController,", "    //BarElement,", "    LineController,", "    LineElement,", "    PointElement,", "    CategoryScale,", "    LinearScale,", "  )", "", "  def apply(pageS: Signal[WeatherGradientPage]): HtmlElement = {", "", "    // Just a naming convention: if a variable ends in a capital S, it's a Signal or Stream.", "    // Helps to differentiate Scala collections from observables, and their mixes:", "    // e.g. users: List[user], userS: Signal[User], usersS: Signal[List[User]]", "    // #Note: `def` is important here, but hopefully not for long, looking to fix it in 17.0.0", "    def gradientS = pageS.flatMap { p =>", "      Gradient.forId(p.gradientId) match {", "        case Some(gradient) =>", "          EventStream.fromValue(gradient)", "        case None =>", "          forcePage(NotFoundPage)", "          EventStream.empty", "      }", "    }", "", "    val apiResponseS = gradientS.flatMap { gradient =>", "      FetchStream", "        .withDecoder(jsonApiDecoder[GradientReport])", "        .get(absRoot / \"api\" / \"weather\" / \"gradient\" / gradient.id)", "    }", "    // collect-ing the stream simply skips all events that don't match", "    // (errors, in this case). Note: you can't `filter` or `collect`", "    // SIGNALS because they must always have a current value.", "    // Read Airstream docs to understand why, and how to do what you need.", "    val gradientReportStream = apiResponseS.collect {", "      case ApiResponse.Result(report) => report", "    }", "", "    div(", "      // attr(value) is alias for attr := value", "      // `cls` is alias for `className` â€“ this HTML DOM property sets CSS class name on this element", "      cls(\"WeatherGradientView\"),", "      h1(", "        child.text <-- gradientS.map(_.name + \" gradient\")", "      ),", "      renderOtherGradients(gradientS),", "      renderError(apiResponseS),", "      child <-- gradientReportStream.toWeakSignal.splitOption(", "        (initialReport, reportSignal) => renderChart(initialReport, reportSignal),", "        ifEmpty = div(\"Loading data...\")", "      ),", "      CodeSnippets(", "        _.`wind-gradient`.sortBy(_.fileName != \"WeatherGradientView.scala\"),", "        startExpanded = _.fileName == \"WeatherGradientView.scala\"", "      )", "    )", "  }", "", "  private def renderOtherGradients(", "    gradientS: EventStream[Gradient]", "  ): Modifier.Base = {", "    // We use implicit conversion here to convert a list of modifiers into one modifier", "    List[Modifier.Base](", "      \"See also: \",", "      children <-- gradientS.map { gradient =>", "        val otherGradients = Gradient.values.filterNot(_ == gradient)", "        otherGradients.flatMap { g =>", "          List[Node]( // Node is the common type of elements and text nodes", "            a(g.name, navigateTo(WeatherGradientPage(g.id))),", "            \", \"", "          )", "        }.toList.init", "      }", "    )", "  }", "", "  // This function is only called once (when gradientReportStream emits", "  // the network response), so all the elements that it creates are created", "  // only once. Remember â€“ no virtual DOM in Laminar.", "  // Then, we use lifecycle hooks and --> methods to bring reactivity to", "  // those elements that we created, so that, for example, when you click", "  // on a tab for a different day, we don't re-render the whole chart from", "  // scratch, but rather we update it with new data using Chart.js update API.", "  private def renderChart(", "    initialReport: GradientReport,", "    gradientReportS: Signal[GradientReport]", "  ): HtmlElement = {", "    val selectedDayVar = Var(Option.empty[String]) // \"None\" means \"Current observations\"", "    var maybeChart = Option.empty[Chart]", "    div(", "      Tabs(", "        initialReport.forecastDays,", "        maybeForecastDay => {", "          List(", "            // Setting class name dynamically", "            cls.toggle(\"x-selected\") <-- selectedDayVar.signal.map(_ == maybeForecastDay),", "            // When this tab button is clicked, send the corresponding day into the var", "            onClick.mapTo(maybeForecastDay) --> selectedDayVar", "          )", "        }", "      ),", "      div(", "        // Don't put anything else in this div except for the canvas tag!", "        // That's a Chart.js requirement for responsive sizing.", "        cls(\"-graphbox\"),", "        canvasTag(", "          // This lifecycle block instantiates the chart when this element is mounted,", "          // and frees up its resources when it's unmounted. This way you can navigate", "          // in and out of the graph page without using up more resources than needed.", "          onMountUnmountCallback(", "            mount = ctx => {", "              maybeChart = Some(WeatherGradientChart.makeChart(ctx.thisNode.ref))", "            },", "            unmount = _ => maybeChart.foreach(_.destroy())", "          ),", "          // The callback below is invoked whenever you select a different date, or whenever", "          // we get new data from the server (the latter only happens once in this application).", "          // As you see we are not re-creating the chart here on every update, rather,", "          // we reuse the existing chart, pushing updated config to it. This is much more", "          // efficient and gives users a better experience.", "          //", "          // Note: mounting (see onMountUnmountCallback above) is synchronous, and the network", "          // request to fetch graph data is asynchronous, so the latter is guaranteed to happen", "          // AFTER this mounting callback. In this callback we implicitly rely on this sequence", "          // of events, because if it was the other way round, maybeChart here would be empty,", "          // and this callback wouldn't do anything. You always need to consider such things", "          // when building UI applications, but thankfully JS world is single threaded, so it's", "          // much easier to reason about.", "          selectedDayVar.signal.combineWith(gradientReportS) --> { (selectedDay, report) =>", "            maybeChart.foreach { chart =>", "              WeatherGradientChart.updateChart(chart, selectedDay, report)", "            }", "          }", "        ),", "      )", "    )", "  }", "", "", "", "  // Your render functions don't need to return just elements, for example", "  // this one returns a Modifier that inserts a dynamic child node wherever", "  // it's put.", "  private def renderError(apiResponseS: EventStream[ApiResponse[_]]): Mod[Element] = {", "    val maybeApiErrorS = apiResponseS.collect {", "      case ApiResponse.Error(msg, _) => Some(msg)", "      case _ => None", "    }", "    child.maybe <-- maybeApiErrorS.map(_.map { err =>", "      div(textAlign.center, span(cls(\"u-error\"), err))", "    })", "  }", "", "", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/utils/DynamicJsObject.scala", "DynamicJsObject.scala", "scala".asInstanceOf[LanguageName], 7, 7, "wind-gradient", List("trait DynamicJsObject extends js.Object")),
    CodeSnippet("./client/src/main/scala/com/raquo/utils/DynamicJsObject.scala", "DynamicJsObject.scala", "scala".asInstanceOf[LanguageName], 46, 53, "wind-gradient", List("extension (obj: DynamicJsObject)", "", "  def updateDynamic(keyValuePairs: (String, js.Any)*): obj.type = {", "    keyValuePairs.foreach { (key, value) =>", "      obj.asInstanceOf[js.Dynamic].updateDynamic(key)(value)", "    }", "    obj", "  }")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/ChartConfig.scala", "ChartConfig.scala", "scala".asInstanceOf[LanguageName], 28, 80, "wind-gradient", List("/**", "  * @param plugins Inline plugins for this chart.", "  *                - See [[https://www.chartjs.org/docs/latest/configuration/ Chart.js docs]]", "  *                  and [[https://www.chartjs.org/docs/latest/developers/plugins.html API]]", "  */", "class ChartConfig(", "  @JSName(\"type\")", "  var typ: String = null,", "  var data: ChartData,", "  var options: ChartConfigOptions = ChartConfigOptions(),", "  var plugins: js.Dictionary[js.Object] = js.Dictionary()", ") extends DynamicJsObject", "", "", "/**", "  * @param labels X axis labels", "  */", "class ChartData(", "  var labels: js.Array[String] | Unit = js.undefined,", "  var datasets: js.Array[ChartDataset] | Unit = js.undefined", ") extends DynamicJsObject", "", "", "/**", "  * @param label   Caption for this dataset", "  *", "  * @param data    Array of records. Actual records can be in very different shapes. See Chart.js docs.", "  *", "  * @param parsing How to parse the dataset.", "  *                - The parsing can be disabled by specifying `parsing: false`.", "  *                - If parsing is disabled, data must be sorted and in the formats the associated", "  *                  chart type and scales use internally.", "  *", "  *                Example data: `[{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]`", "  *                And its parsing config for bar chart: `js.Dictionary(\"xAxisKey\" -> \"id\", \"yAxisKey\" -> \"nested.value\")`", "  */", "class ChartDataset(", "  var label: String,", "  @JSName(\"type\")", "  var typ: String | Unit = js.undefined,", "  var data: js.Array[_],", "  var backgroundColor: String | Unit = js.undefined,", "  var borderColor: String | Unit = js.undefined,", "  var pointBackgroundColor: String | Unit = js.undefined,", "  var pointBorderColor: String | Unit = js.undefined,", "  var pointBorderWidth: Number | Unit = js.undefined,", "  var pointRadius: Number | Unit = js.undefined,", "  var pointHoverBorderWidth: Number | Unit = js.undefined,", "  var pointHoverRadius: Number | Unit = js.undefined,", "  var parsing: js.Dictionary[String] | Boolean | Unit = js.undefined,", "  var xAxisID: String | Unit = js.undefined,", "  var yAxisID: String | Unit = js.undefined,", ") extends DynamicJsObject")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/ChartDataLabelsPlugin.scala", "ChartDataLabelsPlugin.scala", "scala".asInstanceOf[LanguageName], 7, 9, "wind-gradient", List("@js.native", "@JSImport(\"chartjs-plugin-datalabels\", JSImport.Default)", "object ChartDataLabelsPlugin extends js.Object")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/Chart.scala", "Chart.scala", "scala".asInstanceOf[LanguageName], 33, 56, "wind-gradient", List("@js.native", "@JSImport(\"chart.js\")", "class Chart(", "  val canvas: dom.HTMLCanvasElement | dom.CanvasRenderingContext2D,", "  val config: ChartConfig", ") extends js.Object {", "  ", "  /** Call this after mutating chart config, for it to take effect. */", "  def update(): Unit = js.native", "", "  def destroy(): Unit = js.native", "}", "", "@js.native", "@JSImport(\"chart.js\")", "object Chart extends js.Object {", "  ", "  def defaults: ChartConfigOptions = js.native", "  ", "  // Can accept: chart.js controllers, elements, plugins", "  def register(components: js.Object*): Unit = js.native", "", "  def unregister(components: js.Object*): Unit = js.native", "}")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/Chart.scala", "Chart.scala", "scala".asInstanceOf[LanguageName], 68, 78, "wind-gradient", List("@js.native", "@JSImport(\"chart.js\")", "object LineController extends js.Object", "", "@js.native", "@JSImport(\"chart.js\")", "object CategoryScale extends js.Object", "", "@js.native", "@JSImport(\"chart.js\")", "object LinearScale extends js.Object")),
  )
  
}
