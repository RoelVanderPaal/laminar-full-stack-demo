package com.raquo.app.codesnippets.generated

import com.raquo.app.codesnippets.CodeSnippet
import vendor.highlightjs.hljs.LanguageName

/** This file is generated at compile-time by CodeSnippetsGenerator.scala */
object GeneratedSnippets {
  
  val `controlled` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/ControlledInputsView.scala", "ControlledInputsView.scala", "scala".asInstanceOf[LanguageName], 26, 56, "controlled", List("val zipVar = Var(\"\")", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      controlled(", "        value <-- zipVar,", "        onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipVar", "      )", "    ),", "    button(", "      typ(\"button\"), // HTML buttons are of type \"submit\" by default", "      \"Set SF zip code\",", "      onClick.mapTo(\"94110\") --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  // Using the form element's onSubmit in this example,", "  // but you could also respond on button click if you", "  // don't want a form element", "  button(typ(\"submit\"), \"Submit\")", ")")),
  )
  
  val `counter` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 12, 12, "counter", List("Counter(label = \"Foo\", initialStep = 1),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 19, 44, "counter", List("def Counter(label: String, initialStep: Int): HtmlElement = {", "  val allowedSteps = List(1, 2, 3, 5, 10)", "  val stepVar = Var(initialStep)", "  val diffBus = new EventBus[Int]", "  val countSignal: Signal[Int] = diffBus.events.scanLeft(initial = 0)(_ + _)", "", "  div(", "    cls(\"Counter\"),", "    p(", "      \"Step: \",", "      select(", "        value <-- stepVar.signal.map(_.toString),", "        onChange.mapToValue.map(_.toInt) --> stepVar,", "        allowedSteps.map { step => option(value := step.toString, step) }", "      )", "    ),", "    p(", "      label + \": \",", "      b(child.text <-- countSignal),", "      \" \",", "      // Two different ways to get stepVar's value:", "      button(\"â€“\", onClick.mapTo(-1 * stepVar.now()) --> diffBus),", "      button(\"+\", onClick.compose(_.sample(stepVar.signal)) --> diffBus)", "    )", "  )", "}")),
  )
  
  val `form-state` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.scala", "FormStateView.scala", "scala".asInstanceOf[LanguageName], 9, 87, "form-state", List("object FormStateView {", "", "  // Find and import the LESS (CSS) file for this component. See globResolverPlugin and importSideEffectPlugin", "  JSImportSideEffect(\"@find/**/FormStateView.less\")", "", "  private val stateVar = Var(FormState())", "", "  private val zipWriter = stateVar.updater[String]((state, zip) => state.copy(zip = zip))", "", "  private val descriptionWriter = stateVar.updater[String]((state, desc) => state.copy(city = desc))", "", "  private val submitter = Observer[FormState] { state =>", "    if (state.hasErrors) {", "      stateVar.update(_.copy(showErrors = true))", "    } else {", "      dom.window.alert(s\"Zip: ${state.zip}; Description: ${state.city}\")", "    }", "  }", "", "  def apply(): HtmlElement = {", "    div(", "      cls(\"FormStateView\"),", "      form(", "        onSubmit", "          .preventDefault", "          .mapTo(stateVar.now()) --> submitter,", "", "        renderInputRow(_.cityError)(", "          label(\"City: \"),", "          input(", "            controlled(", "              value <-- stateVar.signal.map(_.city),", "              onInput.mapToValue --> descriptionWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // \"submit\" is the default in HTML", "            \"Clear\",", "            onClick.mapTo(\"\") --> descriptionWriter", "          )", "        ),", "", "        renderInputRow(_.zipError)(", "          label(\"Zip code: \"),", "          input(", "            cls(\"-zipCodeInput\"),", "            placeholder(\"12345\"),", "            controlled(", "              value <-- stateVar.signal.map(_.zip),", "              onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // default button type in HTML is \"submit\", we don't want it", "            \"Set SF\",", "            onClick.mapTo(\"94110\") --> zipWriter", "          )", "        ),", "        ", "        button(typ(\"submit\"), \"Submit\")", "      ),", "      CodeSnippets(_.`form-state`) // Renders the code snippet that you can see online.", "    )", "  }", "", "  private def renderInputRow(", "    error: FormState => Option[String]", "  )(", "    mods: Modifier[HtmlElement]*", "  ): HtmlElement = {", "    val errorSignal = stateVar.signal.map(_.displayError(error))", "    div(", "      cls(\"-inputRow\"),", "      cls.toggle(\"x-hasError\") <-- errorSignal.map(_.nonEmpty),", "      mods,", "      child.maybe <-- errorSignal.map(_.map(err => div(cls(\"-error\"), err)))", "    )", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.less", "FormStateView.less", "less".asInstanceOf[LanguageName], 2, 47, "form-state", List(".FormStateView {", "", "  > h1 {", "    margin-bottom: 35px;", "  }", "", "  > form {", "", "    > .-inputRow {", "      margin: 10px -10px;", "      padding: 10px;", "", "      &.x-hasError {", "        background: #ffeeee;", "      }", "", "      > .-error {", "        margin-top: 5px;", "        color: red;", "        font-size: 90%;", "      }", "", "      > input, > button {", "        margin: 0 5px;", "      }", "", "      > input {", "        padding: 4px 2px;", "        max-width: 80px;", "", "        &.-zipCodeInput {", "          max-width: 60px;", "        }", "      }", "", "      > button {", "        padding: 4px 8px;", "      }", "    }", "", "    > button[type=\"submit\"] {", "      margin-top: 20px;", "      padding: 4px 8px;", "    }", "  }", "}")),
  )
  
  val `hello world` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/HelloWorldView.scala", "HelloWorldView.scala", "scala".asInstanceOf[LanguageName], 23, 35, "hello world", List("val nameVar = Var(initial = \"world\")", "div(", "  label(\"Your name: \"),", "  input(", "    onMountFocus,", "    placeholder := \"Enter your name here\",", "    onInput.mapToValue --> nameVar", "  ),", "  p(", "    \"Hello, \",", "    child.text <-- nameVar.signal.map(_.toUpperCase)", "  )", ")")),
  )
  
  val `time/basic` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 36, 48, "time/basic", List("val tickStream = EventStream.periodic(1000)", "", "div(", "  appStyles,", "  div(", "    \"Tick #: \",", "    child.text <-- tickStream.map(_.toString)", "  ),", "  div(", "    \"Random #: \",", "    child.text <-- tickStream.mapTo(scala.util.Random.nextInt() % 100)", "  )", ")")),
  )
  
  val `time/debounce` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 73, 103, "time/debounce", List("val emailRegex = new RegExp(\"^[^@]+@[^@]+\\\\.[^@]+$\")", "", "def emailError(email: String): Option[String] =", "  if (email.isEmpty)", "    Some(\"Please fill out email\")", "  else if (!emailRegex.test(email))", "    Some(\"Invalid email!\")", "  else", "    None", "", "val inputBus = new EventBus[String]", "", "val debouncedErrorStream: EventStream[Option[String]] =", "  inputBus.events", "    .debounce(1000)", "    .map(emailError)", "", "div(", "  appStyles,", "  span(", "    label(\"Your email: \"),", "    input(", "      value <-- inputBus.events,", "      onInput.mapToValue --> inputBus", "    )", "  ),", "  child <-- debouncedErrorStream.map {", "    case Some(err) => span(cls(\"u-error\"), \"Error: \" + err)", "    case None => span(cls(\"u-success\"), \"Email ok!\")", "  }", ")")),
  )
  
  val `time/delay` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 54, 67, "time/delay", List("val clickBus = new EventBus[Unit]", "", "val maybeAlertStream = EventStream.merge(", "  clickBus.events.mapTo(Some(span(\"Just clicked!\"))),", "  clickBus.events.flatMap { _ =>", "    EventStream.fromValue(None, emitOnce = true).delay(500)", "  }", ")", "", "div(", "  appStyles,", "  button(onClick.mapTo(()) --> clickBus, \"Click me\"),", "  child.maybe <-- maybeAlertStream", ")")),
  )
  
  val `todomvc` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/todomvc/TodoMvcApp.scala", "TodoMvcApp.scala", "scala".asInstanceOf[LanguageName], 9, 213, "todomvc", List("object TodoMvcApp {", "", "  JSImportSideEffect(\"@find/**/TodoMvcApp.css\")", "", "  // This implementation is very loosely based on Outwatch TodoMVC, for comparison see", "  // https://github.com/clovellytech/outwatch-examples/tree/master/todomvc/src/main/scala/todomvc", "", "", "  // --- 1. Models ---", "", "  case class TodoItem(id: Int, text: String, completed: Boolean)", "", "  sealed abstract class Filter(val name: String, val passes: TodoItem => Boolean)", "", "  object ShowAll extends Filter(\"All\", _ => true)", "  object ShowActive extends Filter(\"Active\", !_.completed)", "  object ShowCompleted extends Filter(\"Completed\", _.completed)", "", "  val filters: List[Filter] = ShowAll :: ShowActive :: ShowCompleted :: Nil", "", "  sealed trait Command", "", "  case class Create(itemText: String) extends Command", "  case class UpdateText(itemId: Int, text: String) extends Command", "  case class UpdateCompleted(itemId: Int, completed: Boolean) extends Command", "  case class Delete(itemId: Int) extends Command", "  case object DeleteCompleted extends Command", "", "", "  // --- 2. State ---", "", "  // Var-s are reactive state variables suitable for both local state and redux-like global stores.", "  // Laminar uses my library Airstream as its reactive layer https://github.com/raquo/Airstream", "", "  private val itemsVar = Var(List[TodoItem]())", "  private val filterVar = Var[Filter](ShowAll)", "  private var lastId = 1 // just for auto-incrementing IDs", "", "  private val commandObserver = Observer[Command] {", "    case Create(itemText) =>", "      lastId += 1", "      if (filterVar.now() == ShowCompleted)", "        filterVar.set(ShowAll)", "      itemsVar.update(_ :+ TodoItem(id = lastId, text = itemText, completed = false))", "    case UpdateText(itemId, text) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(text = text) else item))", "    case UpdateCompleted(itemId, completed) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(completed = completed) else item))", "    case Delete(itemId) =>", "      itemsVar.update(_.filterNot(_.id == itemId))", "    case DeleteCompleted =>", "      itemsVar.update(_.filterNot(_.completed))", "  }", "", "", "  // --- 3. Views ---", "", "  lazy val node: HtmlElement = {", "    val todoItemsSignal = itemsVar", "      .signal", "      .combineWith(filterVar.signal)", "      .mapN(_ filter _.passes)", "    div(", "      div(", "        cls(\"todoapp-container u-bleed\"),", "        div(", "          cls(\"todoapp\"),", "          div(", "            cls(\"header\"),", "            h1(\"todos\"),", "            renderNewTodoInput,", "          ),", "          div(", "            hideIfNoItems,", "            cls(\"main\"),", "            ul(", "              cls(\"todo-list\"),", "              children <-- todoItemsSignal.split(_.id)(renderTodoItem)", "            )", "          ),", "          renderStatusBar", "        )", "      ),", "      CodeSnippets(_.`todomvc`)", "    )", "  }", "", "  private def renderNewTodoInput =", "    input(", "      cls(\"new-todo\"),", "      placeholder(\"What needs to be done?\"),", "      autoFocus(true),", "      onEnterPress", "        .mapToValue", "        .filter(_.nonEmpty)", "        .map(Create(_))", "        .setValue(\"\") --> commandObserver,", "      // When all we need is to clear an uncontrolled input, we can use setValue(\"\")", "      //  but we still need an observer to create the subscription, so we just use an empty one.", "      onEscapeKeyUp.setValue(\"\") --> Observer.empty", "    )", "", "  // Render a single item. Note that the result is a single element: not a stream, not some virtual DOM representation.", "  private def renderTodoItem(itemId: Int, initialTodo: TodoItem, itemSignal: Signal[TodoItem]): HtmlElement = {", "    val isEditingVar = Var(false) // Example of local state", "    val updateTextObserver = commandObserver.contramap[UpdateText] { updateCommand =>", "      isEditingVar.set(false)", "      updateCommand", "    }", "    li(", "      cls <-- itemSignal.map(item => Map(\"completed\" -> item.completed)),", "      onDblClick.filter(_ => !isEditingVar.now()).mapTo(true) --> isEditingVar.writer,", "      children <-- isEditingVar.signal.map[List[HtmlElement]] {", "        case true =>", "          val cancelObserver = isEditingVar.writer.contramap[Unit](Unit => false)", "          renderTextUpdateInput(itemId, itemSignal, updateTextObserver, cancelObserver) :: Nil", "        case false =>", "          List(", "            renderCheckboxInput(itemId, itemSignal),", "            label(child.text <-- itemSignal.map(_.text)),", "            button(", "              cls(\"destroy\"),", "              onClick.mapTo(Delete(itemId)) --> commandObserver", "            )", "          )", "      }", "    )", "  }", "", "  // Note that we pass reactive variables: `itemSignal` for reading, `updateTextObserver` for writing", "  private def renderTextUpdateInput(", "    itemId: Int,", "    itemSignal: Signal[TodoItem],", "    updateTextObserver: Observer[UpdateText],", "    cancelObserver: Observer[Unit]", "  ) =", "    input(", "      cls(\"edit\"),", "      defaultValue <-- itemSignal.map(_.text),", "      onMountFocus,", "      onEscapeKeyUp.mapToUnit --> cancelObserver,", "      onEnterPress.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver,", "      onBlur.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver", "    )", "", "  private def renderCheckboxInput(itemId: Int, itemSignal: Signal[TodoItem]) =", "    input(", "      cls(\"toggle\"),", "      typ(\"checkbox\"),", "      checked <-- itemSignal.map(_.completed),", "      onInput.mapToChecked.map { isChecked =>", "        UpdateCompleted(itemId, completed = isChecked)", "      } --> commandObserver", "    )", "", "  private def renderStatusBar =", "    footerTag(", "      hideIfNoItems,", "      cls(\"footer\"),", "      span(", "        cls(\"todo-count\"),", "        child.text <-- itemsVar.signal", "          .map(_.count(!_.completed))", "          .map(pluralize(_, \"item left\", \"items left\")),", "      ),", "      ul(", "        cls(\"filters\"),", "        filters.map(filter => li(renderFilterButton(filter)))", "      ),", "      child.maybe <-- itemsVar.signal.map { items =>", "        if (items.exists(ShowCompleted.passes)) Some(", "          button(", "            cls(\"clear-completed\"),", "            \"Clear completed\",", "            onClick.map(_ => DeleteCompleted) --> commandObserver", "          )", "        ) else None", "      }", "    )", "", "  private def renderFilterButton(filter: Filter) =", "    a(", "      cls.toggle(\"selected\") <-- filterVar.signal.map(_ == filter),", "      onClick.preventDefault.mapTo(filter) --> filterVar.writer,", "      filter.name", "    )", "", "  // Every little thing in Laminar can be abstracted away", "  private def hideIfNoItems: Mod[HtmlElement] =", "    display <-- itemsVar.signal.map { items =>", "      if (items.nonEmpty) \"\" else \"none\"", "    }", "", "", "  // --- Generic helpers ---", "", "  private def pluralize(num: Int, singular: String, plural: String): String =", "    s\"$num ${if (num == 1) singular else plural}\"", "", "  private val onEnterPress = onKeyPress.filter(_.keyCode == dom.KeyCode.Enter)", "", "  // Non-printable characters don't get a `keypress` event in JS,", "  // so we need to listen to `keydown` or `keyup` instead.", "  private val onEscapeKeyUp = onKeyUp.filter(_.keyCode == dom.KeyCode.Escape)", "}")),
  )
  
  val `uncontrolled/form-no-vars` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 103, 124, "uncontrolled/form-no-vars", List("val inputEl = input(", "  placeholder(\"12345\"),", "  maxLength(5), // HTML can help block some undesired input", "  onInput", "    .mapToValue", "    .map(_.filter(Character.isDigit))", "    .setAsValue --> Observer.empty", ")", "", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(inputEl.ref.value) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    inputEl", "  ),", "  p(", "    button(typ(\"submit\"), \"Submit\")", "  )", ")")),
  )
  
  val `uncontrolled/listening` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 44, 69, "uncontrolled/listening", List("val inputTextVar = Var(\"\")", "val checkedVar = Var(false)", "div(", "  appStyles,", "  p(", "    label(\"Name: \"),", "    input(", "      onInput.mapToValue --> inputTextVar", "    )", "  ),", "  p(", "    \"You typed: \",", "    child.text <-- inputTextVar", "  ),", "  p(", "    label(\"I like to check boxes: \"),", "    input(", "      typ(\"checkbox\"),", "      onInput.mapToChecked --> checkedVar", "    )", "  ),", "  p(", "    \"You checked the box: \",", "    child.text <-- checkedVar", "  )", ")")),
  )
  
  val `uncontrolled/transforming` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 75, 97, "uncontrolled/transforming", List("val zipVar = Var(\"\")", "div(", "  appStyles,", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      onInput", "        .mapToValue", "        .map(_.filter(Character.isDigit))", "        .setAsValue --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  button(", "    onClick.mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "    \"Submit\"", "  )", ")")),
  )
  
}
